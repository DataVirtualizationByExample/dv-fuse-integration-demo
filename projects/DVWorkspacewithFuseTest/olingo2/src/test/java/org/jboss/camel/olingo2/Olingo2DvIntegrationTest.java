/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.camel.olingo2;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.olingo2.api.batch.Olingo2BatchChangeRequest;
import org.apache.camel.component.olingo2.api.batch.Olingo2BatchQueryRequest;
import org.apache.camel.component.olingo2.api.batch.Olingo2BatchRequest;
import org.apache.camel.component.olingo2.api.batch.Olingo2BatchResponse;
import org.apache.camel.component.olingo2.api.batch.Operation;
import org.apache.camel.component.olingo2.api.impl.Olingo2AppImpl;
import org.apache.camel.component.olingo2.internal.Olingo2Constants;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.apache.http.impl.nio.client.HttpAsyncClients;
import org.apache.olingo.odata2.api.commons.HttpStatusCodes;
import org.apache.olingo.odata2.api.edm.Edm;
import org.apache.olingo.odata2.api.ep.entry.ODataEntry;
import org.apache.olingo.odata2.api.ep.feed.ODataFeed;
import org.apache.olingo.odata2.api.servicedocument.ServiceDocument;
import org.apache.olingo.odata2.core.uri.SystemQueryOption;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test class for {@link org.apache.camel.component.olingo2.api.Olingo2App} APIs.
 * <p>
 * The integration test runs against Apache Olingo 2.0 sample server
 * described at http://olingo.apache.org/doc/sample-setup.html
 * </p>
 * <p>
 * Sample data must be first generated by using the sample client described with the server,
 * or by running test <code>Olingo2AppIntegrationTest</code> in camel-olingo2-api module.
 * </p>
 */
public class Olingo2DvIntegrationTest extends AbstractOlingo2TestSupport {

    private static final Logger LOG = LoggerFactory.getLogger(Olingo2DvIntegrationTest.class);
    private static final String ISBN_PROPERTY = "ISBN";
    private static final String BOOKS = "BooksMySQL.BOOKS";
    private static final String TEST_BOOK = "BooksMySQL.BOOKS('0-13-239856-7')";
   // private static final String CARS = "Cars";
    private static final String TEST_RESOURCE_CONTENT_ID = "0-13-239856-7";
    private static final String BOOK = "BOOK";
    private static final String TEST_RESOURCE = "$1";
    private static final String TEST_CREATE_BOOK = "BooksMySQL.BOOK('0-12-345678-9')";

    @Test
    public void testRead() throws Exception {
    	
    	final Map<String, Object> headers = new HashMap<String, Object>();

        // read ServiceDocument
//        final ServiceDocument document = requestBodyAndHeaders("direct://READSERVICEDOC", null, headers);
//        assertNotNull(document);
//        assertFalse("ServiceDocument entity sets", document.getEntitySetsInfo().isEmpty());
//        LOG.info("Service document has {}  entity sets", document.getEntitySetsInfo().size());

        // parameter type is java.util.Map
        final HashMap<String, String> queryParams = new HashMap<String, String>();
        queryParams.put(SystemQueryOption.$top.name(), "5");
        headers.put("CamelOlingo2.queryParams", queryParams);

        // read ODataFeed
        final ODataFeed books = requestBodyAndHeaders("direct://READFEED", null, headers);
        assertNotNull(books);
        final List<ODataEntry> booksEntries = books.getEntries();
        assertFalse("Books empty entries", booksEntries.isEmpty());
        LOG.info("Books feed has {} entries", booksEntries.size());
        System.out.println("Books feed has {} entries - " + booksEntries.size());
        int j = 0;
    	while (j < booksEntries.size()) {
    		System.out.println(booksEntries.get(j));
    		j++;
    	}

        // read ODataEntry
        headers.clear();
        headers.put(Olingo2Constants.PROPERTY_PREFIX + "keyPredicate", "'0-13-239856-7'");
        final ODataEntry manufacturer = requestBodyAndHeaders("direct://READENTRY", null, headers);
        assertNotNull(manufacturer);
        final Map<String, Object> properties = manufacturer.getProperties();
        assertEquals("Book ISBN", "0-13-239856-7", properties.get(ISBN_PROPERTY));
        LOG.info("Book: {}", properties.toString());
    }

    @Test
    @Ignore
    public void testCreateUpdateDelete() throws Exception {
        final Map<String, Object> data = getEntityData();
        
        final ODataEntry book = requestBody("direct://CREATE", data);
        assertNotNull("Created Book", book);
        final Map<String, Object> properties = book.getProperties();
        assertEquals("Created Book ISBN", "0-042-123456", properties.get(ISBN_PROPERTY));
        LOG.info("Created Book: {}", properties);

        // update
        data.put("TITLE", "SAP");

        HttpStatusCodes status = requestBody("direct://UPDATE", data);
        assertNotNull("Update status", status);
        assertEquals("Update status", HttpStatusCodes.NO_CONTENT.getStatusCode(), status.getStatusCode());
        LOG.info("Update status: {}", status);

        // delete
        status = requestBody("direct://DELETE", null);
        assertNotNull("Delete status", status);
        assertEquals("Delete status", HttpStatusCodes.NO_CONTENT.getStatusCode(), status.getStatusCode());
        LOG.info("Delete status: {}", status);
    }

    private Map<String, Object> getEntityData() {
        final Map<String, Object> data = new HashMap<String, Object>();
        data.put("ISBN", "0-042-123456");
        data.put("TITLE", "Red Hat");
        data.put("SUBTITLE", "How They Conquered The World");
        data.put("TYPE", "Softback");
        data.put("PUBLISHER", new Integer(7));
        data.put("EDITION", new Integer(1));
        data.put("PUBLISH_YEAR", new Integer(2015));
        
        return data;
    }

    @Test
    @Ignore
    public void testBatch() throws Exception {
        final List<Olingo2BatchRequest> batchParts = new ArrayList<Olingo2BatchRequest>();

        // 1. Edm query
        batchParts.add(Olingo2BatchQueryRequest.resourcePath(Olingo2AppImpl.METADATA).build());

        // 2. feed query
        batchParts.add(Olingo2BatchQueryRequest.resourcePath(BOOKS).build());

        // 3. read
        batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_BOOK).build());

        // 4. read with expand
        //Not supported yet in the DV OData provider
        //See https://issues.jboss.org/browse/TEIID-3039
//        final HashMap<String, String> queryParams = new HashMap<String, String>();
//        queryParams.put(SystemQueryOption.$expand.toString(), CARS);
//        batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_BOOK).queryParams(queryParams).build());

        // 5. create
        final Map<String, Object> data = getEntityData();
        batchParts.add(Olingo2BatchChangeRequest.resourcePath(BOOKS).
            contentId(TEST_RESOURCE_CONTENT_ID).operation(Operation.CREATE).body(data).build());

        // 6. update
        final Map<String, Object> updateData = new HashMap<String, Object>(data);
        @SuppressWarnings("unchecked")
        Map<String, Object> book = (Map<String, Object>) updateData.get(BOOK);
        updateData.put("TITLE", "SAP");

        batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.UPDATE)
            .body(updateData).build());

        // 7. delete
        batchParts.add(Olingo2BatchChangeRequest.resourcePath(TEST_RESOURCE).operation(Operation.DELETE).build());

        // 8. read to verify delete
        batchParts.add(Olingo2BatchQueryRequest.resourcePath(TEST_CREATE_BOOK).build());

        // execute batch request
        final List<Olingo2BatchResponse> responseParts = requestBody("direct://BATCH", batchParts);
        assertNotNull("Batch response", responseParts);
        assertEquals("Batch responses expected", 6, responseParts.size());

        final Edm edm = (Edm) responseParts.get(0).getBody();
        assertNotNull(edm);
        LOG.info("Edm entity sets: {}", edm.getEntitySets());

        final ODataFeed feed = (ODataFeed) responseParts.get(1).getBody();
        assertNotNull(feed);
        LOG.info("Read feed: {}", feed.getEntries());

        ODataEntry dataEntry = (ODataEntry) responseParts.get(2).getBody();
        assertNotNull(dataEntry);
        LOG.info("Read entry: {}", dataEntry.getProperties());

       // dataEntry = (ODataEntry) responseParts.get(3).getBody();
       // assertNotNull(dataEntry);
       // LOG.info("Read entry with $expand: {}", dataEntry.getProperties());

        dataEntry = (ODataEntry) responseParts.get(3).getBody();
        assertNotNull(dataEntry);
        LOG.info("Created entry: {}", dataEntry.getProperties());

        int statusCode = responseParts.get(4).getStatusCode();
        assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);
        statusCode = responseParts.get(5).getStatusCode();
        LOG.info("Update status: {}", statusCode);
        assertEquals(HttpStatusCodes.NO_CONTENT.getStatusCode(), statusCode);
        LOG.info("Delete status: {}", statusCode);

        assertEquals(HttpStatusCodes.NOT_FOUND.getStatusCode(), responseParts.get(6).getStatusCode());
        final Exception exception = (Exception) responseParts.get(6).getBody();
        assertNotNull(exception);
        LOG.info("Read deleted entry exception: {}", exception);
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            public void configure() {
                // test routes for read
                from("direct://READSERVICEDOC")
                    .to("olingo2://read/");

                from("direct://READFEED")
                    .to("olingo2://read/BooksMySQL.BOOKS?$orderBy=ISBN%20asc");

                from("direct://READENTRY")
                    .to("olingo2://read/BooksMySQL.BOOKS");

                // test route for create
                from("direct://CREATE")
                    .to("olingo2://create/BooksMySQL.BOOKS");

                // test route for update
                from("direct://UPDATE")
                    .to("olingo2://update/BooksMySQL.BOOKS('0-12-345678-9')");

                // test route for delete
                from("direct://DELETE")
                    .to("olingo2://delete/BooksMySQL.BOOKS('0-12-345678-9')");

/*
                // test route for merge
                from("direct://MERGE")
                    .to("olingo2://merge");

                // test route for patch
                from("direct://PATCH")
                    .to("olingo2://patch");
*/

                // test route for batch
                from("direct://BATCH")
                    .to("olingo2://batch");

            }
        };
    }
}
